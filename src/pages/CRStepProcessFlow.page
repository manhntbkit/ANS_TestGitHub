<apex:page standardController="Change_Request__c" extensions="ChangeRequestController">
 <apex:pageBlock title="Sequence of CR Steps for {!changeRequest.Name}">
     <div id="crStepDiagram"></div>
 </apex:pageBlock>


 <script type="text/javascript" language="Javascript">     
    var positionY = 50;
    var positionX = 50;
    var maxWidth = 1000;
    var maxHeight = 1000;
    var MAX_ELEMENT_LINE = 6;
    var MAX_SPACE = 50, LINE_HEIGHT = 105;
    var NEXT_SPACE_X = 150;
    var LABEL_SPACE_X = 10;
    
    var cX, cY, cH, pcX, pcY, pcH, peX, peY, peH, spmX, spmY, spmH, scX, scY, scH, seX, seY, seH;
    
    
    //set the values based on number of steps of each owner
    cX = 0; cY = 0;
   cH = getYHeight("{!NumOfClientStep}"); 
 
    
   pcX = 0; pcY = cY + cH;
   pcH = getYHeight("{!NumOfPCStep}");
  
   peX = 0; peY = pcY + pcH;
   peH = getYHeight("{!NumOfPEStep}");
   
   spmX = 0; spmY = peY + peH;
   spmH = getYHeight("{!NumOfSPMStep}");
     
   scX = 0; scY = spmY + spmH;
   scH = getYHeight("{!NumOfSCStep}");
  
   seX = 0; seY = scY + scH;
   seH = getYHeight("{!NumOfSEStep}"); 
 
    // adjust height of paper according to components
    maxHeight = cH + pcH + peH + spmH + scH + seH ;
    
    //Draw the rectangles 
    Joint.paper("crStepDiagram", maxWidth , maxHeight);
    
    var erd = Joint.dia.erd;
    
    if(cH>0) {
     var e1 = erd.Entity.create({
          rect: { x: cX, y: cY, width: maxWidth , height: cH },
          label:"Client",
          labelAttrs: {
            'stroke-width': 1,   
            'font-size': 11,
            rotation: 90,
            x: cX + LABEL_SPACE_X, y: cY + cH/2
          },
          
           attrs: {stroke: "white"}         
        });
     
       e1.draggable(false);       
    }
   
    if(pcH >0) {
        var e2 = erd.Entity.create({
              rect: { x: pcX, y: pcY + 5, width: maxWidth , height: pcH },
              label:"Prime Commercial",
              labelAttrs: {
                'stroke-width': 1,   
                'font-size': 11,
                rotation: 90,
                x: pcX + LABEL_SPACE_X, y: pcY + pcH/2
              },
              
               attrs: {stroke: "white", fill: "LightCoral"}   
            });
           e2.draggable(false);  
    }
    
        
     if(peH >0) {     
         var e3 = erd.Entity.create({
              rect: { x: peX, y: peY + 5, width: maxWidth , height: peH },
              label:"Prime Engineering",
              labelAttrs: {
                'stroke-width': 1,   
                'font-size': 11,
                rotation: 90,
                x: peX + LABEL_SPACE_X, y: peY + peH/2 + 5
              },
               attrs: {stroke: "white", fill: "Khaki "}   
            });
           e3.draggable(false);           
     }   
     
        
     if(spmH > 0){
      var e4 = erd.Entity.create({
          rect: { x: spmX, y: spmY + 5, width: maxWidth , height: spmH },
          label:"SPM",
          labelAttrs: {
            'stroke-width': 1,   
            'font-size': 11,
            rotation: 90,
            x: spmX + LABEL_SPACE_X, y: spmY + spmH/2
          },
          
           attrs: {stroke: "white", fill: "DarkKhaki"}   
        });
        e4.draggable(false);                      
     }    
        
     if(scH > 0){
          var e5 = erd.Entity.create({
              rect: { x: scX, y: scY + 5, width: maxWidth , height: scH },
              label:"Sub Commercial",
              labelAttrs: {
                'stroke-width': 1,   
                'font-size': 11,
                rotation: 90,
                x: scX + LABEL_SPACE_X, y: scY + scH/2
              },
               attrs: {stroke: "white", fill: "Plum"}   
            });
           e5.draggable(false);     
     }
            
     if(seH > 0){
            var e6 = erd.Entity.create({
              rect: { x: seX, y: seY + 5, width: maxWidth , height: seH },
              label:"Sub Engineering",
              labelAttrs: {
                'stroke-width': 1,   
                'font-size': 11,
                rotation: 90,
                x: seX + LABEL_SPACE_X, y: seY + seH/2
              },
               attrs: {stroke: "white", fill: "Olive "}   
            });
            
            e6.draggable(false);
    } 
            
    
        
    //reset the values to draw nodes
    cX += 0; cY += 50;
    pcX += 0; pcY += 50;
    peX += 0; peY += 50;
    spmX += 0; spmY += 50;
    scX += 0; scY += 50;
    seX += 0; seY += 50;
    
    //Draw the nodes of process flow
    var stepsDia= Joint.dia.fsa;
    var startStep= stepsDia.StartState.create({ 
                        position: {x: positionX, y: positionY }});
    
    var allSteps = new Array();
    var allCRStepNames = new Array();
    var sizeOfStepList = {!CRStepList.size};
    var nextPointsArr = new Array();
    var alterPointsArr = new Array();
    var dependPointsArr = new Array();
    var index = -1;
    
   
    <apex:repeat var="crStep" value="{!CRStepList}">
         
        //set values for positionX, positionY     
        if ("{!crStep.Process_Owner__c}" == "Client") { 
            cX += NEXT_SPACE_X;
            
            if(cX > maxWidth) {
                cX = NEXT_SPACE_X;
                cY += LINE_HEIGHT;
            }
            
            positionX = cX;
            positionY = cY;
            
        }
        else if ("{!crStep.Process_Owner__c}" == 'Prime Commercial') {  
                pcX += NEXT_SPACE_X;
                
                if(pcX > maxWidth) {
                    pcX = NEXT_SPACE_X;
                    pcY += LINE_HEIGHT;
                }
                
                positionX = pcX;
                positionY = pcY;
           }
        else if ("{!crStep.Process_Owner__c}" == 'Prime Engineering') {  
                peX += NEXT_SPACE_X;
            
                if(peX > maxWidth) {
                    peX = NEXT_SPACE_X;
                    peY += LINE_HEIGHT;
                }
                
                positionX = peX;
                positionY = peY;
            }
        else if ("{!crStep.Process_Owner__c}" == 'SPM') {
                spmX += NEXT_SPACE_X;
            
                if(spmX > maxWidth) {
                    spmX = NEXT_SPACE_X;
                    spmY += LINE_HEIGHT;
                }
                
                positionX = spmX;
                positionY = spmY;
            }
        else if ("{!crStep.Process_Owner__c}" == 'Sub Commercial') {  
                scX += NEXT_SPACE_X;
            
                if(scX > maxWidth) {
                    scX = NEXT_SPACE_X;
                    scY += LINE_HEIGHT;
                }
                
                positionX = scX;
                positionY = scY;
            }
        else if ("{!crStep.Process_Owner__c}" == 'Sub Engineering') { 
                 seX += NEXT_SPACE_X;
            
                if(seX > maxWidth) {
                    seX = NEXT_SPACE_X;
                    seY += LINE_HEIGHT;
                }
                
                positionX = seX;
                positionY = seY;
            }   
                
       
        index ++;
        
        var step_{!crStep.Id};
        var erd = Joint.dia.erd;
        var rect_wid = 55;
        var rect_hei = 50;
       
        if ("Decision Point" == "{!crStep.Step_Type__c}") {
            //Decision Point
            //step_{!crStep.Id}= stepsDia.State.create({ position: {x: positionX , y: positionY}, 
            //                            label: "{!crStep.Process_Step_Name__c}",
            //                            attrs: {stroke: "black", fill: "yellow"} });
            
            step_{!crStep.Id} = erd.Relationship.create({
              rect: { x: positionX , y: positionY  - rect_hei/3 , width: rect_hei*0.7, height: rect_hei*0.7 },
              label: "{!crStep.Process_Step_Name__c}",
              attrs: {stroke: "black", fill: "yellow"} });                        

        } else if ("Terminal Step" == "{!crStep.Step_Type__c}" ){
            
            step_{!crStep.Id}= stepsDia.State.create({ position: {x: positionX , y: positionY}, 
                                        label: "{!crStep.Process_Step_Name__c}",
                                        attrs: {stroke: "black", fill: "white"} });
            var endPoint = stepsDia.EndState.create({position: {x: positionX + 70 , y: positionY + 30}});
            //Connect Ending Step to EndPoint
            step_{!crStep.Id}.joint(endPoint , stepsDia.arrow);
        } else if ("Starting Step" == "{!crStep.Step_Type__c}") {
            step_{!crStep.Id}= stepsDia.State.create({ position: {x: positionX , y: positionY}, 
                                        label: "{!crStep.Process_Step_Name__c}",
                                        attrs: {stroke: "black", fill: "white"} });        
        } else {
            //Activity Step
            //step_{!crStep.Id}= stepsDia.State.create({ position: {x: positionX , y: positionY}, 
            //                          label: "{!crStep.Process_Step_Name__c}",
            //                          attrs: {stroke: "black", fill: "white"} });
           
           
           step_{!crStep.Id} = erd.Entity.create({
              rect: { x: positionX, y: positionY - rect_hei/2 , width: rect_wid, height: rect_hei },
              label: "{!crStep.Process_Step_Name__c}",
              labelAttrs: {
                x: positionX + rect_wid/2, y: positionY + rect_hei/5, 'font-family': 'sans-serif', 'font-size': 10, },
              attrs: {stroke: "black", fill: "White"}  
           });
                        
        }
        allSteps.push(step_{!crStep.Id});
        allCRStepNames.push("step_{!crStep.Id}");
        
        //Connect StartPoint to Startting Step
        if ("Starting Step" == "{!crStep.Step_Type__c}") {
            startStep.joint(step_{!crStep.Id}, stepsDia.arrow);
        }
       
        if (('' + "{!crStep.Next_CR_Step__c}").length > 0) { 
            var nextPoint= new Array();
            nextPoint[index] = "step_{!crStep.Next_CR_Step__c}";
            nextPointsArr.push(nextPoint);
        }
        if (('' + "{!crStep.Alternate_CR_Step__c}").length > 0) {
            var alterPoint= new Array();
            alterPoint[index] = "step_{!crStep.Alternate_CR_Step__c}";
            alterPointsArr.push(alterPoint);
        }
        if (('' + "{!crStep.Dependent_CR_Step__c}").length > 0) {
            var dependPoint= new Array();
            dependPoint[index] = "step_{!crStep.Dependent_CR_Step__c}";
            dependPointsArr.push(dependPoint);
        }            
    </apex:repeat>
    
    //Draw the connecting line to next steps.
    for (var i=0; i<nextPointsArr.length; i++) {
        var nextPoint= nextPointsArr[i];
        for (var step in nextPoint) {
            var index = parseInt(step);
            var nextIndex = lookupIndexOf(allCRStepNames, nextPoint[step]);
            allSteps[index ].joint(allSteps[nextIndex ], stepsDia.arrow);
        }
    }
    
    //Draw the connecting line to alternate steps.
    for (var i=0; i<alterPointsArr.length; i++) {
        var alterPoint= alterPointsArr[i];
        for (var step in alterPoint) {
            var index = parseInt(step);
            var alterIndex = lookupIndexOf(allCRStepNames, alterPoint[step]);
            allSteps[index ].joint(allSteps[alterIndex ], stepsDia.arrow);
        }
    }
    
    //Draw the connecting line to dependent steps.
    for (var i=0; i<dependPointsArr.length; i++) {
        var dependPoint= dependPointsArr[i];
        for (var step in dependPoint) {
            var index = parseInt(step);
            var dependIndex = lookupIndexOf(allCRStepNames, dependPoint[step]);
            if(dependIndex > -1) {
                allSteps[index ].joint(allSteps[dependIndex ]);
            }
        }
    }
    
    
    //This method is to find the index of step in array.
    function lookupIndexOf(stepNameArray, stepName) {
         for (var i=0; i<stepNameArray.length; i++) {
             if(stepName == stepNameArray[i]) {
                 return i;
             }
         }         
         return -1;
    }
    
    function getYHeight(num) {
      if(num <= 0){
          return 0;
      }
      if(num < MAX_ELEMENT_LINE)
          return LINE_HEIGHT;
      if(num % MAX_ELEMENT_LINE > 0)
          return LINE_HEIGHT * (num / MAX_ELEMENT_LINE + 1);
     return LINE_HEIGHT * (num / MAX_ELEMENT_LINE);
    }
   
 </script>
    

 <!-- apex:includeScript value="http://www.jointjs.com/build/joint.all.min.js"/ --> 
 <apex:includeScript value="{!URLFOR($Resource.JointJS_Library, 'raphael.js')}"/>
 <apex:includeScript value="{!URLFOR($Resource.JointJS_Library, 'joint.min.js')}"/>
 <apex:includeScript value="{!URLFOR($Resource.JointJS_Library, 'joint.dia.min.js')}"/>
 <apex:includeScript value="{!URLFOR($Resource.JointJS_Library, 'joint.dia.fsa.min.js')}"/>
 <apex:includeScript value="{!URLFOR($Resource.JointJS_Library, 'joint.dia.erd.min.js')}"/>

 
 
 
</apex:page>